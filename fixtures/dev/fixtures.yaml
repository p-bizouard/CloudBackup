parameters:
    hash: $argon2id$v=19$m=65536,t=4,p=1$SM0i/lRHseD4E2nq4RR5Kg$LB/HV7sLdNYWEBd/0tw71gygrWPVFB7pgL45I8gDlBc

App\Entity\User:
    dev:
        email: dev@example.com
        password: <{hash}>
        plainPassword: dev
        roles: [ROLE_ADMIN]

App\Entity\OSProject:
    os-project:
        name: os-project
        authUrl: https://auth.cloud.ovh.net/v3/
        identityApiVersion: 3
        userDomainName: Default
        projectDomainName: Default
        tenantId: xxxxxxxxxxxxxxxxxxxxxxx
        tenantName: xxxxxxxxxxxxxxxxxxxxxxx
        username: xxxxxxxxxxxxxxxxxxxxxxx
        password: xxxxxxxxxxxxxxxxxxxxxxx
App\Entity\OSInstance:
    os-instance:
        id: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
        name: os-instance
        osRegionName: OS_REGION
        osProject: "@os-project"
App\Entity\Storage:
    swift:
        name: swift
        type: restic
        osProject: "@os-project"
        osRegionName: OS_REGION
        resticPassword: resticPassword
        resticRepo: swift:container:/subdirectory
    local:
        name: local
        type: restic
        resticPassword: resticPassword
        resticRepo: /data/backup/
    s3:
        name: s3
        type: restic
        awsAccessKeyId: minioadmin
        awsSecretAccessKey: minioadmin
        awsDefaultRegion: region
        resticPassword: resticPassword
        resticRepo: s3:http://minio:9000/restic/subdirectory
    rclone:
        name: rclone
        type: rclone
        rcloneConfiguration: |
            \[repo]
            type = s3
            provider = Other
            env_auth = false
            access_key_id = minioadmin
            secret_access_key = minioadmin
            region = region
            endpoint = http://minio:9000
            acl = private

            \[crypt]
            type = crypt
            remote = repo:rclone-bucket/subdirectory
            password = egtBWMUKof2xAPP_jYBrMu1VA4c
            password2 = 7B_ZxzkfP6Q0ObYu5eWPDUnztoA

App\Entity\Host:
    host-by-key:
        name: host-by-key
        ip: 1.2.3.4
        login: debian
        password: ~
        privateKey: |
            -----BEGIN OPENSSH PRIVATE KEY-----
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            -----END OPENSSH PRIVATE KEY-----
        port: 22
    host-by-pass:
        name: host-by-pass
        ip: example.com
        login: debian
        password: password
        privateKey: ~
        port: 22

App\Entity\Kubeconfig:
    kubeconfig:
        name: kubeconfig
        kubeconfig: |
            kubeconfig
App\Entity\BackupConfiguration:
    daily-instance:
        name: daily-instance
        type: os-instance
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        osInstance: "@os-instance"
        storageSubPath: "daily-snapshot"
        enabled: false
    daily-failed-instance:
        name: daily-failed-instance
        type: os-instance
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        osInstance: "@os-instance"
        storageSubPath: "daily-failed-snapshot"
        enabled: false
    daily-failed-check:
        name: daily-failed-check
        type: postgresql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@s3"
        host: ~
        storageSubPath: "daily-failed-check"
        dumpCommand: "PGPASSWORD='db' /usr/lib/postgresql/13/bin/pg_dump -U db -h postgres -p 5432 db"
        minimumBackupSize: 5000
        enabled: false
    daily-mysql:
        name: daily-mysql
        type: mysql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        host: "@host-by-key"
        storageSubPath: "daily-mysql"
        dumpCommand: "sudo mysqldump --defaults-file=/root/.my.cnf --all-databases"
        minimumBackupSize: 200000000
        enabled: false
    daily-mysql-local:
        name: daily-mysql-local
        type: mysql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@local"
        host: "@host-by-key"
        storageSubPath: "daily-mysql"
        dumpCommand: "sudo mysqldump --defaults-file=/root/.my.cnf --all-databases"
        minimumBackupSize: 200000000
        enabled: false
    daily-mysql-hostpass:
        name: daily-mysql-host-pass
        type: mysql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        host: ~
        storageSubPath: "daily-mysql-host-pass"
        dumpCommand: "mysqldump --host example.com --user=username --port=3306 --password=password --all-databases"
        minimumBackupSize: 500000
        enabled: false
    daily-postgres-hostpass:
        name: daily-postgres-direct
        type: postgresql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        host: ~
        storageSubPath: "daily-postgres-direct"
        dumpCommand: "PGPASSWORD='password' /usr/lib/postgresql/12/bin/pg_dump -U username -h example.com -p 5432 database"
        minimumBackupSize: 500000
        enabled: false
    sshfs:
        name: sshfs
        type: sshfs
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        host: "@host-by-key"
        storageSubPath: "daily-sshfs"
        remotePath: "/var/www"
        dumpCommand: "-o sftp_server='/usr/bin/sudo /usr/lib/openssh/sftp-server'"
        enabled: false
    ssh-restic:
        name: ssh-restic
        type: ssh-restic
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        host: "@host-by-key"
        storageSubPath: "daily-ssh-restic"
        remotePath: "/var/www"
        dumpCommand: ""
        enabled: false
    read-restic:
        name: read-restic
        type: read-restic
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@swift"
        storageSubPath: "daily-mysql-host-pass"
        enabled: false
    ssh-cmd:
        name: daily-ssh-cmd
        type: ssh-cmd
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        host: "@host-by-key"
        storage: "@swift"
        storageSubPath: "daily-ssh-cmd"
        dumpCommand: "cat /etc/passwd"
        minimumBackupSize: 1
        enabled: false
    sftp:
        name: daily-sftp
        type: sftp
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        host: "@host-by-key"
        storage: "@swift"
        storageSubPath: "daily-sftp"
        dumpCommand: ~
        remotePath: "/var/www/v2/prod.sh"
        minimumBackupSize: 1
        enabled: false
    daily-dev-postgres-s3:
        name: dev-postgres-s3
        type: postgresql
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@s3"
        host: ~
        storageSubPath: "dev-postgres-s3"
        dumpCommand: "PGPASSWORD='db' /usr/lib/postgresql/13/bin/pg_dump -U db -h postgres -p 5432 db"
        minimumBackupSize: 5000
        enabled: false
    daily-rclone:
        name: rclone
        type: rclone
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@rclone"
        remotePath: "source:/app/fixtures"
        storageSubPath: "crypt:/storage"
        rcloneBackupDir: "crypt:/backup"
        minimumBackupSize: 1
        rcloneConfiguration: |
            \[source]
            type = local
        enabled: false
    backupconfiguration-kubeconfig:
        name: kubeconfig
        type: kubeconfig
        periodicity: "daily"
        keepDaily: 7
        keepWeekly: 4
        storage: "@s3"
        host: ~
        kubeconfig: "@kubeconfig"
        kubeNamespace: default
        kubeResource: pod/nginx
        storageSubPath: "kubeconfig"
        dumpCommand: "ls -la"
        minimumBackupSize: 1
        enabled: false

App\Entity\Backup:
    failed:
        backupConfiguration: "@daily-failed-instance"
        currentPlace: dump
        createdAt: <(new DateTime("yesterday"))>
    failed_check:
        backupConfiguration: "@daily-failed-check"
        currentPlace: health_check
        createdAt: <(new DateTime("today"))>

App\Entity\Log:
    log_error:
        backup: "@failed_check"
        level: <(App\Entity\Log::LOG_ERROR)>
        message: |
            Error executing cleanup - restic check - error for tree 8b39f66a:
            tree 8b39f66a: file "bdd.sqlc" blob 3 size could not be found
            tree 8b39f66a: file "bdd.sqlc" blob 4 size could not be found
            tree 8b39f66a: file "bdd.sqlc" blob 5 size could not be found
            tree 8b39f66a, blob a753f9c6: not found in index
            tree 8b39f66a, blob 830b5ab0: not found in index
            tree 8b39f66a, blob b548c207: not found in index
            Fatal: repository contains errors
